apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  labels:
    pipeline.openshift.io/type: kubernetes
  name: myapp-ci-pipeline
  namespace: myapp-ci
spec:
  resources:
  - name: intermediate-image
    type: image
  - name: runtime-image
    type: image    
  params:
  - name: STORAGE_DRIVER            # Used for the build step to tell Buildah how to store images
    type: string
    default: vfs
  - name: source-git-url            # Application source code git url
    type: string
  - name: source-git-revision       # Application source code git branch or tag
    type: string
  - name: gitrepository_fullname    # Application source code git repository full name
    type: string
  - name: commit_prior_revision     # Application source code git commit id (most recent commit) - Only used when triggered by a Tekton trigger
    type: string
  - name: commit_date               # Application source code git commit date - Only used when triggered by a Tekton trigger
    type: string
  - name: commit_author             # Application source code git commit author - Only used when triggered by a Tekton trigger
    type: string    
  - name: openshift_app_name        # OpenShift project name
    type: string
  - name: runtime_image_name        # OpenShift imagestream name
    type: string
  - name: runtime_base_image        # Input base image into which the build jar file is injected
    type: string 
  - name: myapp-cd-git-url          # Continuous delivery git repository url
    type: string
  - name: my-app-cd-git-repo-name   # Continuous delivery git repository name
    type: string
  - name: my-app-cd-git-repo-path-to-content-development    # Path to the development assets in the continuous delivery git repository
    type: string
  - name: my-app-cd-git-repo-path-to-content-qa             # Path to the qa assets in the continuous delivery git repository
    type: string
  - name: my-app-cd-git-commit-comment-dev  # Comment to be applied to the cd git commit when updating the Kustomize files
    type: string
  - name: my-app-cd-git-commit-comment-qa   # Comment to be applied to the cd git commit when updating the Kustomize files
    type: string    
  - name: my-app-cd-git-repo-branch-qa      # Branch for commit of kustomization change for QA updates
    type: string   
  - name: my-app-cd-git-target-branch-pr    # Target branch for a pull request to merge changes from an environment specific 'feature' branch
    type: string
  - name: my-app-cd-git-user-name           # Continuous delivery git repository update user - username
    type: string
  - name: my-app-cd-git-user-email          # Continuous delivery git repository update user - email 
    type: string  
  - name: acs_central_endpoint              # Advanced Cluster Security endpoint
    type: string
  - name: acs_api_token                     # Advanced Cluster Security access token secret
    type: string
  - name: roxctl-output-format              # Advanced Cluster Security image scan output format
    type: string    
  tasks:
##------------------------------------------------------------------
# Git clone source code task
##------------------------------------------------------------------
  - name: git-clone-source
    params:
    - name: url
      value: $(params.source-git-url)
    - name: revision
      value: $(params.source-git-revision)
    - name: verbose
      value: 'false'
    - name: subdirectory
      value: source
    taskRef:
      kind: ClusterTask
      name:  git-clone
    workspaces:
    - name: output
      workspace: files    
##------------------------------------------------------------------
# Build application
##------------------------------------------------------------------      
  - name: build
    params:
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    resources:
      outputs:
      - name: intermediate-image
        resource: intermediate-image
    taskRef:
      kind: Task
      name: build
    runAfter:
    - git-clone-source
    workspaces:
    - name: files
      workspace: files      
##------------------------------------------------------------------
# Create the runtime image from a base container image and
# deployable asset extracted from the builder container image.
##------------------------------------------------------------------
  - name: create-runtime-image
    params:
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    - name: gitrepository_url
      value: $(params.source-git-url)
    - name: gitrepository_fullname
      value: $(params.gitrepository_fullname)
    - name: commit_prior_revision
      value: $(params.commit_prior_revision)
    - name: commit_reference_branch
      value: $(params.source-git-revision)
    - name: commit_date
      value: $(params.commit_date)
    - name: commit_author
      value: $(params.commit_author)
    - name: runtime_image_name
      value: $(params.runtime_image_name)
    - name: openshift_app_name
      value: $(params.openshift_app_name)
    - name: runtime_base_image
      value: $(params.runtime_base_image)
    - name: sourceCommitTag
      value: "$(tasks.git-clone-source.results.commit)"
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: pipelineName
      value: $(context.pipeline.name)        
    resources:
      inputs:
      - name: intermediate-image
        resource: intermediate-image
      outputs:
      - name: runtime-image
        resource: runtime-image
    taskRef:
      kind: Task
      name: create-runtime-image
    runAfter:
    - build
    workspaces:
    - name: files
      workspace: files  
##------------------------------------------------------------------
# Clone the cd repository and update the kustomization file for the
# development environment to refer to the new tagged image.
##------------------------------------------------------------------      
  - name: update-and-commit-kustomization-file-dev
    params: 
    - name: GIT_URL
      value: $(params.myapp-cd-git-url)
    - name: GIT_REPO_NAME
      value: $(params.my-app-cd-git-repo-name)
    - name: GIT_BRANCH
      value: "main"
    - name: GIT_PATH_TO_CONTENT
      value: $(params.my-app-cd-git-repo-path-to-content-development)
    - name: GIT_USER_NAME
      value: $(params.my-app-cd-git-user-name)
    - name: GIT_USER_EMAIL
      value: $(params.my-app-cd-git-user-email)
    - name: GIT_COMMIT_COMMENT
      value: $(params.my-app-cd-git-commit-comment-dev)    
    - name: IMAGE 
      value: $(tasks.create-runtime-image.results.new-image-repo-location)     
    - name: LOCATION
      value: "dev" 
    taskRef:
      kind: Task
      name: update-and-commit-kustomization-file   
    runAfter:
    - create-runtime-image      
    workspaces:
    - name: files
      workspace: files
##------------------------------------------------------------------
# Perform image build check
##------------------------------------------------------------------
  - name: image-build-check
    params:
    - name: acs_central_endpoint
      value: $(params.acs_central_endpoint)
    - name: acs_api_token
      value: $(params.acs_api_token)
    - name: public-url
      value: $(tasks.create-runtime-image.results.new-image-repo-location)
    - name: roxctl-output-format
      value: $(params.roxctl-output-format)        
    taskRef:
      kind: Task
      name: acs-image-build-check    
    runAfter:
    - create-runtime-image    
##------------------------------------------------------------------
# Clone the cd repository and update the kustomization file for the
# qa environment to refer to the new tagged image.
##------------------------------------------------------------------      
  - name: update-and-commit-kustomization-file-qa
    params: 
    - name: GIT_URL
      value: $(params.myapp-cd-git-url)
    - name: GIT_REPO_NAME
      value: $(params.my-app-cd-git-repo-name)
    - name: GIT_BRANCH
      value: $(params.my-app-cd-git-repo-branch-qa)
    - name: GIT_PR_TARGET_BRANCH
      value: $(params.my-app-cd-git-target-branch-pr)
    - name: GIT_PATH_TO_CONTENT
      value: $(params.my-app-cd-git-repo-path-to-content-qa)
    - name: GIT_USER_NAME
      value: $(params.my-app-cd-git-user-name)
    - name: GIT_USER_EMAIL
      value: $(params.my-app-cd-git-user-email)
    - name: GIT_COMMIT_COMMENT
      value: $(params.my-app-cd-git-commit-comment-qa)    
    - name: IMAGE 
      value: $(tasks.create-runtime-image.results.new-image-repo-location)   
    - name: LOCATION
      value: "qa"           
    taskRef:
      kind: Task
      name: update-and-commit-kustomization-file   
    runAfter:
    - image-build-check   
    when:
    - input: "$(tasks.image-build-check.results.scan-result)"
      operator: in
      values:
      - "pass"    
    workspaces:
    - name: files
      workspace: files            
##------------------------------------------------------------------
# Workspace definition.
##------------------------------------------------------------------         
  workspaces:
  - name: files  